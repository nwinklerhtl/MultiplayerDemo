@page "/"
@using Messages
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Nav

<h3 class="mb-3">Multiplayer Server Dashboard</h3>

@if (!connected)
{
    <p><em>Connecting to SignalR hub …</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <h5>Packets</h5>
            <div class="border p-2 bg-dark text-light small" style="height:300px;overflow:auto;">
                @foreach (var p in packets.AsEnumerable().Reverse())
                {
                    <div>@p.Time.ToString("hh:mm:ss.fff") | <strong>@p.Src</strong> → @p.Payload.Input</div>
                }
            </div>
        </div>

        <div class="col-md-6">
            <h5>State Updates</h5>
            <div class="border p-2 bg-dark text-light small" style="height:300px;overflow:auto;">
                @foreach (var s in states.AsEnumerable().Reverse())
                {
                    <div>@s.Time.ToString("hh:mm:ss.fff") | @s.Payload.StateToString()</div>
                }
            </div>
        </div>
    </div>
    
    @* Game Visualization *@
    <div class="mt-4">
        <!-- Outer container: black background + fixed aspect ratio 4:3 -->
        <div class="server-view">
            <!-- SVG scales to container, keeps aspect ratio, and uses an 800x600 virtual space -->
            <svg viewBox="0 0 800 600" preserveAspectRatio="xMidYMid meet" class="server-svg">
                <!-- BACKGROUND (dark) -->
                <rect x="0" y="0" width="800" height="600" fill="#000000" />

                @if (latestState is not null)
                {
                    @* <!-- GRID (subtle, to show world bounds) --> *@
                    @* @for (int x = 0; x <= 800; x += 40) *@
                    @* { *@
                    @*     <line x1="@x" y1="0" x2="@x" y2="600" stroke="#2b2f38" stroke-width="1" /> *@
                    @* } *@
                    @* @for (int y = 0; y <= 600; y += 40) *@
                    @* { *@
                    @*     <line x1="0" y1="@y" x2="800" y2="@y" stroke="#2b2f38" stroke-width="1" /> *@
                    @* } *@

                    <!-- ORBS (simple cyan circles) -->
                    @foreach (var o in latestState.Orbs)
                    {
                        <circle cx="@o.X" cy="@o.Y" r="6" fill="#78FFF0" />
                    }

                    <!-- PLAYERS (triangles pointing right by default, rotated by Angle) -->
                    @foreach (var p in latestState.Players)
                    {
                        var fill = "#87CEEB";
                        var stroke = "#111111";
                        var a = RadToDeg(p.Angle); // 0 rad means "right" in our world; triangle points right by default

                        <!-- Triangle defined in LOCAL coords, pointing right: (nose) (tail-top) (tail-bottom) -->
                        <circle cx="@p.X" cy="@p.Y" r="6" fill="red" />

                        <!-- Name/score label (tiny, above) -->
                        <svg:text x="@(p.X + 14)" y="@(p.Y - 10)" font-size="10" fill="#CCCCCC">
                            @p.Id (@p.Score)
                        </svg:text>
                    }
                }
            </svg>
        </div>
    </div>
}

@code {
    // infrastructure
    private HubConnection? hub;
    private bool connected;
    
    // state
    private record State(StateMessage Payload, DateTime Time);
    private readonly List<SignalRPacketMessage> packets = new();
    private readonly List<State> states = new();
    
    // for game field rendering
    private StateMessage? latestState;

    protected override async Task OnInitializedAsync()
    {
        var baseUri = Nav.BaseUri.TrimEnd('/');
        var hubUrl = baseUri.Replace("blazor", "server") + "/networkhub";
        // if hosted together, you can simply use Nav.ToAbsoluteUri("/networkhub").ToString()
        // hub = new HubConnectionBuilder()
        //     .WithUrl(Nav.ToAbsoluteUri("/networkhub"))
        //     .WithAutomaticReconnect()
        //     .Build();
        hub = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/networkHub")
            .WithAutomaticReconnect()
            .Build();

        hub.On<SignalRPacketMessage>("PacketEvent", data =>
        {
            // var src = data?.GetType().GetProperty("src")?.GetValue(data)?.ToString() ?? "";
            // var payload = data?.GetType().GetProperty("payload")?.GetValue(data)?.ToString() ?? "";
            // var time = data?.GetType().GetProperty("time")?.GetValue(data)?.ToString() ?? "";
            packets.Add(data);
            if (packets.Count > 20) packets.RemoveAt(0);
            InvokeAsync(StateHasChanged);
        });

        hub.On<SignalRStateMessage>("StateUpdate", data =>
        {
            // var payload = data?.GetType().GetProperty("payload")?.GetValue(data)?.ToString() ?? "";
            // var time = data?.GetType().GetProperty("time")?.GetValue(data)?.ToString() ?? "";
            states.Add(new State(data.Payload, data.Time));
            while (states.Count > 20) states.RemoveAt(0);
            latestState = data.Payload;
            InvokeAsync(StateHasChanged);
        });

        await hub.StartAsync();
        connected = true;
    }

    // Helper for SVG rotation (radians -> degrees)
    private static double RadToDeg(float rad) => rad * (180.0 / Math.PI);
}
